{
  // https://github.com/Nash0x7E2/awesome-flutter-snippets
  "Stateless Widget": {
    "prefix": "stl",
    "body": [
      "//import 'package:flutter/material.dart'$0;",
      "class ${1:name} extends StatelessWidget {",
      "  //const ${1:name}({Key? key}) : super(key: key);\n",
      "  @override",
      "  Widget build(BuildContext context,) {",
      "    return Container(height: 60.0, color: Colors.orange,);",
      "  }",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "stf",
    "body": [
      "//import 'package:flutter/material.dart'$0;",
      "class ${1:name} extends StatefulWidget {",
      "  ${1:name}({Key? key}) : super(key: key);\n",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}\n",
      "class _${1:index}State extends State<${1:index}> {",
      "  @override",
      "  Widget build(BuildContext context,) {",
      "    return Container(height: 60.0, color: Colors.orange);",
      "  }",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "Custom Clipper ": {
    "prefix": "customClipper",
    "body": [
      "class ${0:name}Clipper extends CustomClipper<Path> {",
      "",
      "  @override",
      "  Path getClip(Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
      "}"
    ],
    "description": "Create custom shapes"
  },
  "InitState ": {
    "prefix": "initState",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Called by the framework when this object is inserted into the tree exactly once for each State object."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "Reassemble": {
    "prefix": "reassemble",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "ListView.Builder": {
    "prefix": "listviewbuilder",
    "body": [
      "ListView.builder(",
      "  //padding: EdgeInsets,",
      "  //scrollDirection: Axis, //.horizontal,",
      "  itemCount: ${1:1},",
      "  itemBuilder: (BuildContext context, int index,) {",
      "  return ${2:Container()};",
      " },",
      ")"
    ],
    "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
  },
  "ListView.Separated": {
    "prefix": "listViewS",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (BuildContext context, int index,) {",
      "  return ${2:Divider()};",
      " },",
      "  itemBuilder: (BuildContext context, int index,) {",
      "  return ${3:Container()};",
      " },",
      ")"
    ],
    "description": "Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'."
  },
  "Custom Scroll View": {
    "prefix": "customscrollview_widget",
    "body": ["CustomScrollView(", "  slivers: [", "  ${0:}", "  ],", ")"],
    "description": "Creates a `ScrollView` that creates custom scroll effects using slivers."
  },
  "Stream Builder": {
    "prefix": "streamBldr",
    "body": [
      "StreamBuilder(",
      "  stream: ${1:stream},",
      "  initialData: ${2:initialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      ")"
    ],
    "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
  },
  "Animated Builder": {
    "prefix": "animatedBldr",
    "body": [
      "AnimatedBuilder(",
      "  animation: ${1:animation},",
      "  child: ${2:null},",
      "  builder: (BuildContext context, Widget child,) {",
      "    return ${3:};",
      "  },",
      ")"
    ],
    "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
  },
  "Stateful Builder": {
    "prefix": "statefulBldr",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      ")"
    ],
    "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
  },
  "Orientation Builder": {
    "prefix": "orientationBldr",
    "body": [
      "OrientationBuilder(",
      "  builder: (BuildContext context, Orientation orientation) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      ")"
    ],
    "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
  },
  "Layout Builder": {
    "prefix": "layoutBldr",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints) {",
      "    return ${0:};",
      "  },",
      ")"
    ],
    "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
  },
  "Single Child ScrollView": {
    "prefix": "singleChildSV",
    "body": [
      "SingleChildScrollView(",
      "  controller: ${1:controller,}",
      "  child: Column(",
      "    ${0:}",
      "  ),",
      ")"
    ],
    "description": "Creates a scroll view with a single child"
  },
  "Future Builder": {
    "prefix": "futureBldr",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return ${3:};",
      "  },",
      ")"
    ],
    "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
  },
  "No Such Method": {
    "prefix": "nosm",
    "body": [
      "@override",
      "dynamic noSuchMethod(Invocation invocation) {",
      "  ${1:}",
      "}"
    ],
    "description": "This method is invoked when a non-existent method or property is accessed."
  },
  "Inherited Widget": {
    "prefix": "inheritedW",
    "body": [
      "class ${1:Name} extends InheritedWidget {",
      "  ${1:Name}({Key? key, required this.child}) : super(key: key, child: child);",
      "",
      "  final Widget child;",
      "",
      "  static ${1:Name}? of(BuildContext context) {",
      "    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();",
      "  }",
      "",
      "  @override",
      "  bool updateShouldNotify(${1:Name} oldWidget) {",
      "    return ${2:true};",
      "  }",
      "}"
    ],
    "description": "Class used to propagate information down the widget tree"
  },
  "Mounted": {
    "prefix": "mounted",
    "body": ["@override", "bool get mounted {", "  ${0:}", "}"],
    "description": "Whether this State object is currently in a tree."
  },
  "Sink": {
    "prefix": "snk",
    "body": [
      "Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A Sink is the input of a stream."
  },
  "Stream": {
    "prefix": "strm",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
      "final _${2:name}Controller = StreamController<${1:type}>();"
    ],
    "description": "A source of asynchronous data events. A stream can be of any data type <T>"
  },
  "Subject": {
    "prefix": "subj",
    "body": [
      "Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;",
      "final _${2:name}Subject = BehaviorSubject<${1:type}>();"
    ],
    "description": "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream."
  },
  "toString": {
    "prefix": "toStr",
    "body": ["@override", "String toString() {", "return ${1:toString};", " }"],
    "description": "Returns a string representation of this object."
  },
  "debugPrint": {
    "prefix": "debugP",
    "body": ["debugPrint(${1:statement});"],
    "description": "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)."
  },
  "Material Package": {
    "prefix": "importM",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import flutter material package"
  },
  "Cupertino Package": {
    "prefix": "importC",
    "body": "import 'package:flutter/cupertino.dart';",
    "description": "Import Flutter Cupertino package"
  },
  "flutter_test Package": {
    "prefix": "importFT",
    "body": "import 'package:flutter_test/flutter_test.dart';",
    "description": "Import flutter_test package"
  },
  "Material App": {
    "prefix": "materialapp_widget",
    "description": "MaterialApp Widget",
    "body": [
      "import 'package:flutter/material.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Material App',",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: Text('App Bar'),",
      "        ),",
      "        body: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "description": "Create a CupertinoApp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      " ",
      "void main() => runApp(MyApp());",
      " ",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Container(",
      "            child: Text('Hello World'),",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Tween Animation Builder": {
    "prefix": "tweenAnimationBuilder",
    "body": [
      "TweenAnimationBuilder(",
      "    duration: ${1:const Duration(),}",
      "    tween: ${2:Tween(),}",
      "    builder: (BuildContext context, ${3:dynamic} value, Widget child) {",
      "       return ${4:Container();}",
      "     },",
      " ),  "
    ],
    "description": "Widget builder that animates a property of a Widget to a target value whenever the target value changes."
  },
  "Value Listenable Builder": {
    "prefix": "valueListenableBuilder",
    "body": [
      "ValueListenableBuilder(",
      "    valueListenable: ${1: null},",
      "    builder: (BuildContext context, ${2:dynamic} value, Widget child) {",
      "       return ${3: Container();}",
      "    },",
      " ),"
    ],
    "description": "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
  },
  "Test": {
    "prefix": "f-test",
    "body": ["test(", "   \"${1:test description}\",", "   () {},", ");"],
    "description": "Create a test function"
  },
  "Test Widgets": {
    "prefix": "widgetTest",
    "body": [
      "testWidgets(",
      "   \"${1:test description}\",",
      "   (WidgetTester tester) async {},",
      ");"
    ],
    "description": "Create a testWidgets function"
  },
  "class def": {
    "prefix": "classdef",
    "body": [
      "class ${1:class_name} {",
      "\tfinal String field $0;",
      "",
      "\t${1:class_name}({required this.field});",
      "}"
    ],
    "description": "class definition"
  },
  "container Widget Full": {
    "prefix": "container_widget_full",
    "body": [
      "Container(",
      "\t//margin: const EdgeInsets.symmetric(vertical: 5.0) ,",
      "\t//padding: ,",
      "\t//height: , // double.infinity,",
      "\t//width: ,",
      "\tdecoration: BoxDecoration(",
      "\t\t\t//gradient: LinearGradient(colors: []),",
      "\t\t\t//  use either borderRadius or shape: BoxShape.circular but not both",
      "\t\t\t//borderRadius: BorderRadius.circular(12.0),",
      "\t\t\t// BoxShape.circle applies borderRadius 50%",
      "\t\t\t//shape: BoxShape.circle,",
      "\t\t\t//color: Colors.orange,",
      "\t\t\t// image: DecorationImage( // CachedNetworkImageProvider",
      "\t\t\t//   image: NetworkImage('url'), //AssetImage()",
      "\t\t\t//   image should stretch to fill container",
      "\t\t\t//   fit: BoxFit.cover,",
      "\t\t\t// ),",
      "\t\t\t// border: const Border.all(",
      "\t\t\t//   color: Colors.black,",
      "\t\t\t//   width: 8,",
      "\t\t\t// ),",
      "\t\t\t// boxShadow: const BoxShadow(",
      "\t\t\t//   color: Colors.black,",
      "\t\t\t//   offset: Offset(0, 2),",
      "\t\t\t//   blurRadius: 4,",
      "\t\t\t// ),",
      "\t\t\t),",
      "\tchild: null,",
      ")"
    ],
    "description": "Container Widget may be rounded"
  },
  "Stack Widget": {
    "prefix": "stack_widget",
    "body": [
      "Stack(",
      "\t// fit: StackFit.loose, // takes dimensions of largest kids",
      "\t// fit: StackFit.expand, // takes parent's dimensions",
      "",
      "\t// alignment for unpositioned kids",
      "\talignment: AlignmentDirectional.bottomCenter,",
      "\t// clipBehavior: Clip.hardEdge, // = overflow cut off",
      "\t// clipBehavior: Clip.none, // overflow show",
      "\t// clipBehavior: Clip.antiAlias, // overflow show",
      "\tchildren: [",
      "\t\t\t// a Positioned kid - overflow visible/clipped",
      "\t\t\tPositioned(",
      "\t\t\t\t\t//top: ,",
      "\t\t\t\t\t//left: ,",
      "\t\t\t\t\t//bottom: ,",
      "\t\t\t\t\t//right: ,",
      "\t\t\t\t\tchild: Container(),",
      "\t\t\t)",
      "\t],",
      ")"
    ],
    "description": "Stack Widget"
  },
  "CircleAvatar Widget": {
    "prefix": "circleavatar_widget",
    "body": [
      "CircleAvatar(",
      "\tradius: 20.0,",
      "\tbackgroundColor: Colors.orange,",
      "\t// provide either backgroundImage or child, but not both",
      "\t//backgroundImage: NetworkImage('url'), //AssetImage()",
      "\t//child: const Text('AH'),",
      ")"
    ],
    "description": "CircleAvatar Widget"
  },
  "CircleAvatar Border Widget": {
    "prefix": "circleavatar_border_widget",
    "body": [
      "CircleAvatar(",
      "\tradius: 20.0,",
      "\tchild: CircleAvatar(",
      "\t\t\t// inner radius must be smaller than outer radius for border to be visible",
      "\t\t\tradius: 17.0,",
      "\t\t\tbackgroundColor: Colors.orange,",
      "\t// provide either backgroundImage or child, but not both",
      "\t//backgroundImage: NetworkImage('url'), //AssetImage()",
      "\t//child: const Text('AH'),",

      "\t),",
      ")"
    ],
    "description": "CircleAvatar Border Widget"
  },
  "Random Colors": {
    "prefix": "randomcolor",
    "body": [
      "// import 'dart:math';",
      "var randomColors = Colors.primaries[Random().nextInt(Colors.primaries.length)];"
    ],
    "description": "Random Colors"
  },
  "Text Widget": {
    "prefix": "text_widget",
    "body": [
      "Text(",
      "\t'text', // compulsory",
      "\tstyle: TextStyle(",
      "\t\t\t//fontWeight: FontWeight.bold,",
      "\t\t\t//color: Colors.white,",
      "\t\t\t//fontSize: 28.0,",
      "\t\t\t//letterSpacing: -1.2,",
      "\t\t\t//backgroundColor:",
      "\t\t\t//decoration:",
      "\t\t\t//fontFamily:",
      "\t\t\t//height: // line height:final height of text = fontSize * line height",
      "\t),",
      "\t// the following 2 prevent text from overflowing",
      "\t//maxLines: 2,",
      "\t//overflow: TextOverflow.ellipsis,",
      ")"
    ],
    "description": "text Widget"
  },
  "TextButton Icon Widget": {
    "prefix": "textbuttonicon_widget",
    "body": [
      "TextButton.icon(",
      "\t// onLongPress: ,",
      "\tonPressed: () {",
      "\t\t\t",
      "\t},",
      "\tlabel: Text('required'), ",
      "\ticon: const Icon( ",
      "\t\t\tIcons.videocam,",
      "\t\t\tcolor: Colors.red,",
      "\t),",
      "\t// style is a subclass of ButtonStyle",
      "\t// style: ,// TextButton.styleFrom()",
      "\t// autofocus: true/false",
      ")"
    ],
    "description": "TextButton Icon Widget"
  },
  "Container Widget min": {
    "prefix": "container_widget_min",
    "body": ["Container(", "\tcolor: Colors.$1,", "\tchild: null,", ")"],
    "description": "Container Widget min"
  },
  "IconButton widget": {
    "prefix": "iconbutton-widget",
    "body": [
      "\tIconButton(",
      "\t\t\tonPressed: () {},",
      "\t\t\t  // this padding value causes the icon to be centered in parent container,",
      "\t\t\tpadding: EdgeInsets.zero,",
      "\t\t\t//padding: ,",
      "\t\t\ticon: Icon(MdiIcons.facebookMessenger),",
      "\t\t\ticonSize: 30,",
      "\t\t\tcolor: Colors.black,",
      "\t\t\t//alignment: ,",
      "\t\t\t//splashColor: ,",
      "\t),"
    ],
    "description": "IconButton widget"
  },
  "TextField Widget": {
    "prefix": "textfield_widget",
    "body": [
      "TextField(",
      "\t//decoration: InputDecoration.collapsed( // removes the input border",
      "\tdecoration: InputDecoration(",
      "\t\t\thintText: \"${1:Placeholder}\",",
      "\t\t\tlabelText: \"${1:label}\",",
      "\t\t\t// border: OutlineInputBorder()",
      "\t),",
      ")$0"
    ],
    "description": "TextField Widget"
  },
  "SliverAppBar Widget": {
    "prefix": "sliverappbar_widget",
    "body": [
      "SliverAppBar(",
      "\tbackgroundColor: Colors.white,",
      "\tbrightness: Brightness.light,",
      "\tfloating: true,",
      "\tcenterTitle: false,",
      "\ttitle: Text(",
      "\t\t\t'${1:required}',",
      "\t\t\tstyle: TextStyle(",
      "\t\t\t\t\t\t\tcolor: Colors.blue, fontSize: 30, letterSpacing: -1.2,),",
      "\t),",
      "\tactions: [",
      "\t\t\tIconButton(",
      "\t\t\t\t\t\t\tonPressed: () {},",
      "\t\t\t\t\t\t\ticon: Icon(",
      "\t\t\t\t\t\t\t\t\tMdiIcons.facebookMessenger,",
      "\t\t\t\t\t\t\t\t\tcolor: Colors.black,",
      "\t\t\t\t\t\t\t),),",
      "\t],",
      ")"
    ],
    "description": "SliverAppBar Widget"
  },
  "ListTile widget": {
    "prefix": "listtile_widget",
    "body": [
      "ListTile(",
      "\t// leading: icon,",
      "\ttitle: Text('widget'),",
      "\tsubtitle: Text('widget'),",
      "\t// isThreeLine: true,",
      "\t// dense: true,",
      "\t// trailing: icon,",
      "\t// onTap: (){},",
      "\t// onLongPress: () {},",
      "\t// enabled: false,",
      "\t// selected: true,",
      ")"
    ],
    "description": "ListTile Widget"
  },
  "ListView Widget": {
    "prefix": "listview_widget",
    "body": [
      "ListView(",
      "\tchildren: [",
      "\t\t\t//",
      "\t],",
      "\tscrollDirection: Axis.horizontal,",
      "\t// reverse: true,",
      "\t// physics: NeverScrollableScrollPhysics(),",
      "\t// offscreen? garbage collect or cacheExtent",
      "\t// addAutomaticKeepAlives: false,",
      "\t// cacheExtent: 100,",
      ")"
    ],
    "description": "ListView Widget"
  },
  "LinearGradient def": {
    "prefix": "lineargradient_def",
    "body": [
      "LinearGradient(",
      "\tbegin: Alignment.center,",
      "\t // end: Alignment(0.8, 0.0), // see wiki for coord system",
      "\tend: Alignment.bottomCenter,",
      "\tcolors: [",
      "\t\t\tColors.black26,",
      "\t\t\tColors.transparent,",
      "\t// stops: [], // equals len colors",
      "])"
    ],
    "description": "LinearGradient definition"
  },
  "OutlinedButton Icon Widget": {
    "prefix": "outlinedbuttonicon_widget",
    "body": [
      "OutlinedButton.icon(",
      "\tonPressed: () {},",
      "\ticon: ShaderMask(",
      "\t\t\tshaderCallback: (rect) {",
      "\t\t\t\t\treturn _Pallette.createRoomGradient.createShader(",
      "\t\t\t\t\t\t\trect,",
      "\t\t\t\t\t);",
      "\t\t\t},",
      "\t\t\tchild: Icon(",
      "\t\t\t\t\tIcons.video_call,",
      "\t\t\t\t\tsize: 35,",
      "\t\t\t\t\tcolor: Colors.white,",
      "\t\t\t),",
      "\t),",
      "\tlabel: Text(",
      "\t\t\t'Create \\nRooms',",
      "\t),",
      "\tstyle: OutlinedButton.styleFrom(",
      "\t\t\tside: BorderSide(",
      "\t\t\t\t\twidth: 3,",
      "\t\t\t\t\tcolor: const Color(0xFF82B1FF), // Colors.blueAccent[100]",
      "\t\t\t),",
      "\t\t\tshape: StadiumBorder(),",
      "\t),",
      ")"
    ],
    "description": "OutlinedButton Icon Widget"
  },
  "final Widget x": {
    "prefix": "fwx",
    "body": ["final Widget x = $1 ;"],
    "description": "final Widget x"
  },
  "SliverList Widget": {
    "prefix": "sliverlist_widget",
    "body": [
      "SliverList(",
      "\tdelegate: SliverChildBuilderDelegate(",
      "\t\t\t(",
      "\t\t\t\t\tcontext,",
      "\t\t\t\t\tindex,",
      "\t\t\t) {",
      "\t\t\t\t\treturn Container();",
      "\t\t\t},",
      "\t\t\tchildCount: 1,",
      "\t),",
      ")"
    ],
    "description": "SliverList Widget"
  },
  "TextStyle style": {
    "prefix": "textstyle-style",
    "body": [
      "TextStyle(",
      "\t\t\t//fontWeight: FontWeight.bold,",
      "\t\t\t//color: Colors.white,",
      "\t\t\t//fontSize: 28.0,",
      "\t\t\t//letterSpacing: -1.2,",
      "\t\t\t//backgroundColor:",
      "\t\t\t//decoration:",
      "\t\t\t//fontFamily:",
      "\t\t\t//height: // line height:final height of text = fontSize * line height",
      "\t)"
    ],
    "description": "TextStyle style"
  },
  "Image Asset Widget": {
    "prefix": "imageasset-widget",
    "body": [
      "Image.asset(",
      "\t'path',",
      "\t // in case the image should be obatined from some dart package",
      "\tpackage: 'some/dart/package',",
      "\twidth: 200,",
      "\theight: double.infinity,",
      "\t // I guess if you specified width and/or height",
      "\tfit: BoxFit.contain,",
      "\tcolor: Colors.red,",
      "\tcolorBlendMode: BlendMode.darken,",
      "\tsemanticLabel: 'my image alt',",
      ")"
    ],
    "description": "Image Asset Widget"
  },
  "Image Network Widget": {
    "prefix": "imagenetwork-widget",
    "body": [
      "Image.network(",
      "\t'url',",
      "\tloadingBuilder: (",
      "\t\t\tcontext,",
      "\t\t\tchild,",
      "\t\t\tprogress,",
      "\t) {",
      "\t\t\treturn progress == null",
      "\t\t\t\t\t\t\t? child",
      "\t\t\t\t\t\t\t: LinearProgressIndicator(",
      "\t\t\t\t\t\t\t\t\t\t\t//",
      "\t\t\t\t\t\t\t\t\t\t\t);",
      "\t},",
      "\t // in case the image should be obatined from some dart package",
      "\tpackage: 'some/dart/package',",
      "\twidth: 200,",
      "\theight: double.infinity,",
      "\t // I guess if you specified width and/or height",
      "\tfit: BoxFit.contain,",
      "\tcolor: Colors.red,",
      "\tcolorBlendMode: BlendMode.darken,",
      "\tsemanticLabel: 'my image alt',",
      ")"
    ],
    "description": "Image Network Widget"
  },
  "BoxDecoration ppty": {
    "prefix": "boxdecoration",
    "body": [
      "BoxDecoration(",
      "\t//gradient: LinearGradient(colors: []),",
      "\t//  use either borderRadius or shape: BoxShape.circular but not both",
      "\t//borderRadius: BorderRadius.circular(12.0),",
      "\t// BoxShape.circle applies borderRadius 50%",
      "\t//shape: BoxShape.circle,",
      "\t//color: Colors.orange,",
      "\t// image: DecorationImage( // CachedNetworkImageProvider",
      "\t//   image: NetworkImage('url'), //AssetImage()",
      "\t//   image should stretch to fill container",
      "\t//   fit: BoxFit.cover,",
      "\t// ),",
      "\t// border: const Border.all(",
      "\t//   color: Colors.black,",
      "\t//   width: 8,",
      "\t// ),",
      "\t// boxShadow: const BoxShadow(",
      "\t//   color: Colors.black,",
      "\t//   offset: Offset(0, 2),",
      "\t//   blurRadius: 4,",
      "\t// ),",
      "),"
    ],
    "description": "BoxDecoration ppty"
  }
}
